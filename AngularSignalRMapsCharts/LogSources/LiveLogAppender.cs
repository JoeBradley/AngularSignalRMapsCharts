using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using log4net.Appender;
using LiveLog.ServiceHub;
using LiveLog.Models;
using LiveLog.Controllers;

namespace LiveLog.LogSources
{
    /// <summary>
    /// Custom log4net appender.  This will forward anz logs to the LibveLogHub, and broadcast the log to any connected clients.
    /// Ignore logs generated by the client, log hub, log hub controller.
    /// </summary>
    public class LiveLogAppender : AppenderSkeleton
    {
        // Sources to ignore
        private String[] excludeSources = new String[] { 
                typeof(LogHubController).Name, 
                typeof(LogHub).Name, 
        };
            
        protected override void Append(log4net.Core.LoggingEvent e)
        {            
            if (excludeSources.Contains(e.LoggerName)) return;

            var log = new EventLog(e);
            if (e.LoggerName.Equals(typeof(JSLogsController).Name) && e.MessageObject is Dictionary<string,string>)
            {
                var data = e.MessageObject as Dictionary<string, string>;
                log.Title = data["Title"];
                log.Details = data["Message"];
                log.Source = EventLogSource.JS;
                switch (data["Type"])
                {
                    case "log": log.Type = EventLogType.Log; break;
                    case "info": log.Type = EventLogType.Info; break;
                    case "debug": log.Type = EventLogType.Debug; break;
                    case "warn": log.Type = EventLogType.Warn; break;
                    case "error": log.Type = EventLogType.Error; break;
                    case "fatal": log.Type = EventLogType.Fatal; break;
                    default: log.Type = EventLogType.Log; break;
                }
            }
            LogHubController.Instance.BroadcastLog(log);
        }
    }
}